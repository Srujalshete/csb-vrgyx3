{"version":3,"sources":["App.js","index.js"],"names":["App","useState","latitude","longitude","location","setLocation","weatherData","setWeatherData","useEffect","navigator","geolocation","getCurrentPosition","position","newLocation","coords","getWeatherData","console","log","city","axios","get","res","data","temperature","current","description","weather_descriptions","name","region","country","wind_speed","pressure","precip","humidity","img","weather_icons","className","ReactDOM","render","document","getElementById"],"mappings":"mTAmEeA,MA7Df,WACE,MAAgCC,mBAAS,CACvCC,SAAU,GACVC,UAAW,KACX,mBAHKC,EAAQ,KAAEC,EAAW,KAI5B,EAAsCJ,mBAAS,CAAC,GAAE,mBAA3CK,EAAW,KAAEC,EAAc,KAElCC,qBAAU,WACJC,UAAUC,YACZD,UAAUC,YAAYC,oBAAmB,SAACC,GACxC,IAAIC,EAAc,CAChBX,SAAUU,EAASE,OAAOZ,SAC1BC,UAAWS,EAASE,OAAOX,WAE7BE,EAAYQ,GACZE,EAAeF,EAAYX,SAAUW,EAAYV,UAAW,GAC9D,KAEAa,QAAQC,IACN,qEAEFF,EAAeX,EAASF,SAAUE,EAASD,UAAW,IAE1D,GAAG,IAEH,IAAMY,EAAc,iDAAG,WAAOb,EAAUC,EAAWe,GAAI,4GAEjCC,IAAMC,IACtB,mGACEF,EACAhB,EACA,IACAC,GACF,KAAD,EANKkB,EAAG,OAOHC,EAAOD,EAAIC,KACjBN,QAAQC,IAAII,GACZd,EAAe,CACbgB,YAAaD,EAAKE,QAAQD,YAC1BE,YAAaH,EAAKE,QAAQE,qBAAqB,GAC/CtB,SAAUkB,EAAKlB,SAASuB,KACxBC,OAAQN,EAAKlB,SAASwB,OACtBC,QAASP,EAAKlB,SAASyB,QACvBC,WAAYR,EAAKE,QAAQM,WACzBC,SAAUT,EAAKE,QAAQO,SACvBC,OAAQV,EAAKE,QAAQQ,OACrBC,SAAUX,EAAKE,QAAQS,SACvBC,IAAKZ,EAAKE,QAAQW,gBACjB,gDAEHnB,QAAQC,IAAI,cAAc,yDAE7B,gBA1BmB,0CA4BpB,OACE,sBAAKmB,UAAU,aAAY,UACzB,cAAC,IAAM,CAACrB,eAAgBA,IACxB,cAAC,IAAkB,eAAKT,MAG9B,E,MC3DA+B,IAASC,OAAO,cAAC,EAAG,IAAIC,SAASC,eAAe,Q","file":"static/js/main.c73a9ff8.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport DisplayWeatherData from \"./components/DisplayWeatherData\";\n\nfunction App() {\n  const [location, setLocation] = useState({\n    latitude: 45,\n    longitude: 45\n  });\n  const [weatherData, setWeatherData] = useState({});\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        let newLocation = {\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        };\n        setLocation(newLocation);\n        getWeatherData(newLocation.latitude, newLocation.longitude, \"\");\n      });\n    } else {\n      console.log(\n        \"Si no me das permiso, no puedo obtener la localizacion de tu city\"\n      );\n      getWeatherData(location.latitude, location.longitude, \"\");\n    }\n  }, []);\n\n  const getWeatherData = async (latitude, longitude, city) => {\n    try {\n      const res = await axios.get(\n        \"http://api.weatherstack.com/current?access_key=9dc7f352d1a9bc2911eb6b22a51451a4&query={cityname}\" +\n          city +\n          latitude +\n          \",\" +\n          longitude\n      );\n      const data = res.data;\n      console.log(res);\n      setWeatherData({\n        temperature: data.current.temperature,\n        description: data.current.weather_descriptions[0],\n        location: data.location.name,\n        region: data.location.region,\n        country: data.location.country,\n        wind_speed: data.current.wind_speed,\n        pressure: data.current.pressure,\n        precip: data.current.precip,\n        humidity: data.current.humidity,\n        img: data.current.weather_icons\n      });\n    } catch (error) {\n      console.log(\"no se pudo\");\n    }\n  };\n\n  return (\n    <div className=\"container \">\n      <Header getWeatherData={getWeatherData} />\n      <DisplayWeatherData {...weatherData} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />,document.getElementById('root'));\n"],"sourceRoot":""}